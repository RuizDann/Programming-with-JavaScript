If a test fails, then write the code to pass its test. 
Once my test passes, improve both the app's code and the test code, but without changing the behavior of either. 
Refactoring is the process in which I write my feature code to run more efficiently or easier to read and easier to understand for others on the team.
This is done without affecting the results that the code produces.

// TDD (Test-Driven Development) approach
    - you write a failing test
    - write source code so previously failing test now passes
    - optimize source code without changing its results
    - allows for repeatable code, automatic testing, and saves cost/time

// Why test
    - functionality intact
    - bug-free 
    - satisfies requirements

// 3 most common types of testing:
    - e2e (end to end) testing
        - testing tries to imitate how a user might interact with your app
        - slowest and take the most time to set up and run
        - WebdriverJS, Protractor, Cypress
    - integration testing
        - testing how seperate parts of an app work together
        - faster and cheaper than e2e testing, not as fast and cheap as unit testing
        - React testing library, Enzyme
    - unit testing
        - the process of testing the smallests units of the source code in isolation such as functions
        - self contained, fast, easy to write
